{"createdAt":"2024-11-28T17:36:27.029Z","updatedAt":"2025-03-05T21:01:17.973Z","id":"U5NHgxqbMNriPW4F","name":"COMAYC FABIAN","active":true,"nodes":[{"parameters":{"functionCode":"try {\n    // Función para parsear números grandes\n    function parseNumeroUruguayo(valor) {\n    if (typeof valor === 'number') return valor;\n    \n    if (!valor || typeof valor !== 'string') {\n        return NaN;\n    }\n      \n    // Paso 1: Verificar si contiene letras\n    if (/[a-zA-Z]/.test(valor)) {\n        return NaN; // Retornamos NaN para que sea manejado en las validaciones posteriores\n    }\n\n    // Paso 1: Eliminar espacios y símbolo de peso\n    let numeroLimpio = valor.toString()\n        .replace(/\\s/g, '')\n        .replace(/\\$/g, '');\n\n    // Paso 2: Si hay puntos, son separadores de miles, eliminarlos\n    numeroLimpio = numeroLimpio.replace(/\\./g, '');\n\n    // Paso 3: Convertir coma a punto decimal si existe\n    numeroLimpio = numeroLimpio.replace(',', '.');\n\n    console.log('Número antes de parsear:', valor, '→', numeroLimpio);\n    const resultado = parseFloat(numeroLimpio);\n    console.log('Número después de parsear:', resultado);\n    \n    return resultado;\n}\n\n    // Función para formatear números en formato uruguayo\n    function formatearNumero(numero) {\n        return new Intl.NumberFormat('es-UY', {\n            minimumFractionDigits: 0, // Cambiado de 2 a 0\n            maximumFractionDigits: 2  // Mantenemos 2 como máximo por si hay decimales\n        }).format(numero);\n    }\n\n    // Función para cálculo de margen\n    function calculoMargenUY(nominal, liquido) {\n        const minimoLegalUY = nominal * 0.35;\n        const diferencia = liquido - minimoLegalUY;\n        const margenMinimo = 3000;\n        return {\n            tieneMargen: diferencia > margenMinimo,\n            margenDisponible: diferencia\n        };\n    }\n\n    // Funciones para mensajes de respuesta\n    function obtenerMensajeSegunTipo(tipoUsuario, resultado) {\n        return resultado.tieneMargen \n            ? obtenerMensajeAprobado(tipoUsuario)\n            : obtenerMensajeRechazado(tipoUsuario);\n    }\n\n    function obtenerMensajeAprobado(tipoUsuario) {\n    const mensajeFinal = \"\\n\\n*Una vez recibidos, procederemos a evaluar su solicitud, dentro del horario de atención al público, lunes a viernes de 9 a 17 horas.*\";\n\n    if (tipoUsuario === 'empleado') {\n        return `Está en condiciones de solicitar un crédito. Por favor, envíenos fotos nítidas y legibles de la siguiente documentación:\\n\\n• 𝗖𝗲́𝗱𝘂𝗹𝗮 𝗱𝗲 𝗶𝗱𝗲𝗻𝘁𝗶𝗱𝗮𝗱 𝘃𝗶𝗴𝗲𝗻𝘁𝗲\\n• 𝗨́𝗹𝘁𝗶𝗺𝗼𝘀 𝗱𝗼𝘀 𝗿𝗲𝗰𝗶𝗯𝗼𝘀 𝗱𝗲 𝘀𝘂𝗲𝗹𝗱𝗼\\n• 𝗖𝗼𝗻𝘀𝘁𝗮𝗻𝗰𝗶𝗮 𝗱𝗲 𝗱𝗼𝗺𝗶𝗰𝗶𝗹𝗶𝗼 (𝗽𝘂𝗲𝗱𝗲 𝘀𝗲𝗿 𝘂𝗻 𝗿𝗲𝗰𝗶𝗯𝗼 𝗱𝗲 𝗨𝗧𝗘, 𝗢𝗦𝗘, 𝗔𝗡𝗧𝗘𝗟, 𝗲𝘀𝘁𝗮𝗱𝗼 𝗱𝗲 𝗰𝘂𝗲𝗻𝘁𝗮, 𝗲𝘁𝗰.) \\n\\n𝗨𝗻𝗮 𝘃𝗲𝘇 𝗿𝗲𝗰𝗶𝗯𝗶𝗱𝗼𝘀, 𝗽𝗿𝗼𝗰𝗲𝗱𝗲𝗿𝗲𝗺𝗼𝘀 𝗮 𝗲𝘃𝗮𝗹𝘂𝗮𝗿 𝘀𝘂 𝘀𝗼𝗹𝗶𝗰𝗶𝘁𝘂𝗱, 𝗱𝗲𝗻𝘁𝗿𝗼 𝗱𝗲𝗹 𝗵𝗼𝗿𝗮𝗿𝗶𝗼 𝗱𝗲 𝗮𝘁𝗲𝗻𝗰𝗶𝗼́𝗻 𝗮𝗹 𝗽𝘂́𝗯𝗹𝗶𝗰𝗼, 𝗹𝘂𝗻𝗲𝘀 𝗮 𝘃𝗶𝗲𝗿𝗻𝗲𝘀 𝗱𝗲 𝟵 𝗮 𝟭𝟳 𝗵𝗼𝗿𝗮𝘀.`;\n    } else if (tipoUsuario === 'jubilado') {\n        return `Está en condiciones de solicitar un crédito. Por favor, envíenos fotos nítidas y legibles de la siguiente documentación:\\n\\n• 𝗖𝗲́𝗱𝘂𝗹𝗮 𝗱𝗲 𝗶𝗱𝗲𝗻𝘁𝗶𝗱𝗮𝗱 𝘃𝗶𝗴𝗲𝗻𝘁𝗲\\n• 𝗨́𝗹𝘁𝗶𝗺𝗼𝘀 𝗱𝗼𝘀 𝗿𝗲𝗰𝗶𝗯𝗼𝘀 𝗱𝗲 𝗹𝗮 𝗽𝗮𝘀𝗶𝘃𝗶𝗱𝗮𝗱\\n• 𝗖𝗼𝗻𝘀𝘁𝗮𝗻𝗰𝗶𝗮 𝗱𝗲 𝗱𝗼𝗺𝗶𝗰𝗶𝗹𝗶𝗼 (𝗽𝘂𝗲𝗱𝗲 𝘀𝗲𝗿 𝘂𝗻 𝗿𝗲𝗰𝗶𝗯𝗼 𝗱𝗲 𝗨𝗧𝗘, 𝗢𝗦𝗘, 𝗔𝗡𝗧𝗘𝗟, 𝗲𝘀𝘁𝗮𝗱𝗼 𝗱𝗲 𝗰𝘂𝗲𝗻𝘁𝗮, 𝗲𝘁𝗰.) \\n\\n𝗨𝗻𝗮 𝘃𝗲𝘇 𝗿𝗲𝗰𝗶𝗯𝗶𝗱𝗼𝘀, 𝗽𝗿𝗼𝗰𝗲𝗱𝗲𝗿𝗲𝗺𝗼𝘀 𝗮 𝗲𝘃𝗮𝗹𝘂𝗮𝗿 𝘀𝘂 𝘀𝗼𝗹𝗶𝗰𝗶𝘁𝘂𝗱, 𝗱𝗲𝗻𝘁𝗿𝗼 𝗱𝗲𝗹 𝗵𝗼𝗿𝗮𝗿𝗶𝗼 𝗱𝗲 𝗮𝘁𝗲𝗻𝗰𝗶𝗼́𝗻 𝗮𝗹 𝗽𝘂́𝗯𝗹𝗶𝗰𝗼, 𝗹𝘂𝗻𝗲𝘀 𝗮 𝘃𝗶𝗲𝗿𝗻𝗲𝘀 𝗱𝗲 𝟵 𝗮 𝟭𝟳 𝗵𝗼𝗿𝗮𝘀.`;\n    }\n}\n\nfunction obtenerMensajeRechazado(tipoUsuario) {\n    return `Gracias por su consulta. Por ahora no cuenta con el margen necesario, puede consultar más adelante.`;\n}\n\n    // Obtener y validar el input\n    const inputData = $input.all()[0].json.body;\n    console.log(\"Datos recibidos:\", JSON.stringify(inputData));\n\n    if (!inputData || !inputData.parameters) {\n        return {\n            json: {\n                status: \"error\",\n                message: \"Error: Formato de entrada inválido\",\n                debug: { received: inputData }\n            }\n        };\n    }\n\n    // Determinar tipo de usuario y obtener montos\n    const parameters = inputData.parameters;\n    let tipoUsuario;\n    let montoNominal;\n    let montoLiquido;\n\n    if ('montoNominal_jubilado' in parameters && 'montoLiquido_jubilado' in parameters) {\n        tipoUsuario = 'jubilado';\n        montoNominal = parseNumeroUruguayo(parameters.montoNominal_jubilado);\n        montoLiquido = parseNumeroUruguayo(parameters.montoLiquido_jubilado);\n    } else if ('montoNominal_empleado' in parameters && 'montoLiquido_empleado' in parameters) {\n        tipoUsuario = 'empleado';\n        montoNominal = parseNumeroUruguayo(parameters.montoNominal_empleado);\n        montoLiquido = parseNumeroUruguayo(parameters.montoLiquido_empleado);\n    } else {\n        return {\n            json: {\n                status: \"error\",\n                message: \"No se pudo determinar el tipo de usuario o faltan parámetros necesarios\",\n                debug: { parameters }\n            }\n        };\n    }\n\n    console.log(\"Tipo de usuario detectado:\", tipoUsuario);\n\n  // Validación de letras en los montos\nconst contieneLetras = /[a-zA-Z]/.test(parameters.montoNominal_jubilado || parameters.montoNominal_empleado || '') ||\n                       /[a-zA-Z]/.test(parameters.montoLiquido_jubilado || parameters.montoLiquido_empleado || '');\n\nif (contieneLetras) {\n    return {\n        json: {\n            status: \"error\",\n            message: \"Uno o más de los valores proporcionados contienen letras y no son válidos. \\n\\nTe voy a redirigir a las preguntas correspondientes para poder decirte con exactitud si estas calificado para la solicitud de un crédito\",\n            debug: { \n                parametrosOriginales: parameters\n            }\n        }\n    };\n}\n  \n   // Validaciones de montos\n   if (isNaN(montoNominal) || isNaN(montoLiquido)) {\n    return {\n        json: {\n            status: \"error\",\n            message: \"Error: Los montos proporcionados no son válidos\",\n            debug: { \n                montoNominal,\n                montoLiquido,\n                parametrosOriginales: parameters\n            }\n        }\n     };\n   }\n\n\n    // Validación de límites y negativos\n    if (montoNominal > Number.MAX_SAFE_INTEGER || montoLiquido > Number.MAX_SAFE_INTEGER) {\n        return {\n            json: {\n                status: \"error\",\n                message: \"Los montos ingresados son demasiado grandes para procesar\",\n                debug: { \n                    montoNominal,\n                    montoLiquido,\n                    maxPermitido: Number.MAX_SAFE_INTEGER\n                }\n            }\n        };\n    }\n\n    if (montoNominal < 0 || montoLiquido < 0) {\n        return {\n            json: {\n                status: \"error\",\n                message: \"Los montos no pueden ser negativos\",\n                debug: { \n                    montoNominal,\n                    montoLiquido\n                }\n            }\n        };\n    }\n\n  // Validación de montos nominal vs líquido\n    if (montoLiquido >= montoNominal) {\n        return {\n            json: {\n                status: \"error\",\n                message: \"Por favor corrija los montos y vuelva a ingresarlos. El monto 𝐋𝐈𝐐𝐔𝐈𝐃𝐎 no puede ser mayor o igual al monto 𝐍𝐎𝐌𝐈𝐍𝐀𝐋. \\n\\nTe voy a redirigir a las preguntas correspondientes para poder decirte con exactitud si estas calificado para la solicitud del crédito\",\n                debug: { \n                    montoNominal: formatearNumero(montoNominal),\n                    montoLiquido: formatearNumero(montoLiquido)\n                }\n            }\n        };\n    }\n\n    // Realizar el cálculo\n    const resultado = calculoMargenUY(montoNominal, montoLiquido);\n    \n    console.log(\"Resultado del cálculo:\", {\n        tipoUsuario,\n        ...resultado,\n        margenDisponibleFormateado: formatearNumero(resultado.margenDisponible)\n    });\n\n    // Obtener mensaje de respuesta\n    const mensajeRespuesta = obtenerMensajeSegunTipo(tipoUsuario, resultado);\n\n    // Retornar respuesta final\n    return {\n        json: {\n            status: \"success\",\n            message: mensajeRespuesta,\n            data: {\n                tipoUsuario,\n                tieneMargen: resultado.tieneMargen,\n                margenDisponible: formatearNumero(resultado.margenDisponible),\n                valoresProcesados: {\n                    montoNominal: formatearNumero(montoNominal),\n                    montoLiquido: formatearNumero(montoLiquido)\n                }\n            }\n        }\n    };\n\n} catch (error) {\n    console.error(\"Error en el procesamiento:\", error);\n    return {\n        json: {\n            status: \"error\",\n            message: \"Error en el procesamiento de la solicitud\",\n            debug: { \n                error: error.message,\n                stack: error.stack\n            }\n        }\n    };\n}"},"name":"Code","type":"n8n-nodes-base.function","typeVersion":1,"position":[640,440],"id":"856e6d63-2926-48bc-bafd-4171dea463c5"},{"parameters":{"httpMethod":"POST","path":"respond","responseMode":"responseNode","options":{}},"name":"Webhook","type":"n8n-nodes-base.webhook","typeVersion":1,"position":[400,440],"id":"ce7d0765-5090-40b5-85b5-b299cbf567c8","webhookId":"5da6d752-9554-46d5-986e-6b7c553385fd"},{"parameters":{"options":{}},"type":"n8n-nodes-base.respondToWebhook","typeVersion":1.1,"position":[900,440],"id":"2051af6a-c6b7-4b4c-8963-7b118dcf4d09","name":"Respond to Webhook"}],"connections":{"Webhook":{"main":[[{"node":"Code","type":"main","index":0}]]},"Code":{"main":[[{"node":"Respond to Webhook","type":"main","index":0}]]}},"settings":{"executionOrder":"v1","callerPolicy":"workflowsFromSameOwner"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"9c318ebf-92bf-4746-9f64-96aff13ba302","triggerCount":1,"tags":[{"createdAt":"2024-11-27T05:11:34.741Z","updatedAt":"2024-11-27T05:11:34.741Z","id":"lkTQ85NNYkbxB1mk","name":"Prod"}]}