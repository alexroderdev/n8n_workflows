{"createdAt":"2025-01-22T03:40:17.525Z","updatedAt":"2025-01-22T22:33:27.350Z","id":"yywKxDiXAFGuuMl7","name":"My workflow","active":false,"nodes":[{"parameters":{"content":"**Replace password and username for Supabase**","height":80,"width":215,"color":3},"id":"a632a5de-02ee-4ef7-ad5f-1200a973031a","name":"Sticky Note3","type":"n8n-nodes-base.stickyNote","position":[1960,1360],"typeVersion":1},{"parameters":{"content":"### Set up steps\n\n#### Preparation\n1. **Create Accounts**:\n   - [N8N](https://n8n.partnerlinks.io/2hr10zpkki6a): For workflow automation.\n   - [Supabase](https://supabase.com/): For database hosting and management.\n   - [OpenAI](https://openai.com/): For building the conversational AI agent.\n2. **Configure Database Connection**:\n   - Set up a PostgreSQL database in Supabase.\n   - Use appropriate credentials (`username`, `password`, `host`, and `database` name) in your workflow.\n\n#### N8N Workflow\n\nAI agent with tools:\n\n1. **Code Tool**:\n   - Execute SQL queries based on user input.\n2. **Database Schema Tool**:\n   - Retrieve a list of all tables in the database.\n   - Use a predefined SQL query to fetch table definitions, including column names, types, and references.\n3. **Table Definition**:\n   - Retrieve a list of columns with types for one table.","height":545.9087885077763,"width":280.2462120317618,"color":7},"id":"c0a3f663-573b-4165-9d97-7732d4a7c4ca","name":"Sticky Note5","type":"n8n-nodes-base.stickyNote","position":[860,820],"typeVersion":1},{"parameters":{"content":"![5min Logo](https://cflobdhpqwnoisuctsoc.supabase.co/storage/v1/object/public/my_storage/banner.png)\n## AI Agent to chat with Supabase/PostgreSQL DB\n**Made by [Mark Shcherbakov](https://www.linkedin.com/in/marklowcoding/) from community [5minAI](https://www.skool.com/5minai-2861)**\n\nAccessing and analyzing database data often requires SQL expertise or dedicated reports, which can be time-consuming. This workflow empowers users to interact with a database conversationally through an AI-powered agent. It dynamically generates SQL queries based on user requests, streamlining data retrieval and analysis.\n\nThis workflow integrates OpenAI with a Supabase database, enabling users to interact with their data via an AI agent. The agent can:\n- Retrieve records from the database.\n- Extract and analyze JSON data stored in tables.\n- Provide summaries, aggregations, or specific data points based on user queries.\n\n","height":497.1532689930921,"width":636.2128494576581,"color":7},"id":"df553254-dcb6-4d2e-a065-d279c47061e4","name":"Sticky Note6","type":"n8n-nodes-base.stickyNote","position":[860,300],"typeVersion":1},{"parameters":{"content":"### ... or watch set up video [20 min]\n[![Youtube Thumbnail](https://cflobdhpqwnoisuctsoc.supabase.co/storage/v1/object/public/my_storage/14.png)](https://www.youtube.com/watch?v=-GgKzhCNxjk)\n","height":239.5888196628349,"width":330.5152611046425,"color":7},"id":"84381bc7-7b48-49b6-be5b-79c4e0af88db","name":"Sticky Note7","type":"n8n-nodes-base.stickyNote","position":[1160,820],"typeVersion":1},{"parameters":{"name":"search_table","description":"Run custom SQL queries using knowledge about Output structure to provide needed response for user request.\nUse ->> operator to extract JSON data.","jsCode":"const { Pool } = require('pg');\n\n// Create a connection pool to the PostgreSQL database\nconst pool = new Pool({\n  user: 'postgres.mmxvlkzpotcrbgxvawvx', // Replace with your actual Supabase username\n  host: 'aws-0-us-west-1.pooler.supabase.com', // Replace with your actual Supabase host\n  database: 'postgres', // Replace with your actual Supabase database name\n  password: 'er*^XSck*4G6G7if#a2s', // Replace with your actual Supabase password\n  port: 6543, // Replace with your PostgreSQL port, typically 5432\n});\n\nasync function runQuery(query) {\n  try {\n    // Execute the dynamic query\n    const result = await pool.query(query);\n\n    // Extract the rows from the result\n    const queryResult = result.rows;\n\n    // Return the result as a stringified JSON\n    return JSON.stringify(queryResult);\n\n  } catch (error) {\n    // Handle any errors during the query execution and return error message as a string\n    return JSON.stringify({ error: error.message });\n  }\n}\n\n// Example call to the function with dynamic query\nconst dynamicQuery = query.sql_query;\n\n// Call the function with the dynamic query\nreturn runQuery(dynamicQuery);","specifyInputSchema":true,"jsonSchemaExample":"{\n\t\"sql_query\": \"SELECT * FROM FILES\"\n}"},"id":"310aa7e1-dfa4-4a3c-b390-8ddec9db405f","name":"Run SQL query","type":"@n8n/n8n-nodes-langchain.toolCode","typeVersion":1.1,"position":[2020,1220]},{"parameters":{"options":{}},"id":"527af584-7371-4aaf-8efd-6856ed3dd525","name":"OpenAI Chat Model","type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","typeVersion":1,"position":[1860,1180],"credentials":{"openAiApi":{"id":"Xhw7jhGubqs4BVIn","name":"OpenAi ai_agent"}}},{"parameters":{"descriptionType":"manual","toolDescription":"Get list of all tables in database","operation":"executeQuery","query":"SELECT product_name, date_of_selling, quantity, total_amount, client_name, manager\nFROM public.data;","options":{}},"id":"0ff2d9b5-78ed-485f-8836-c3425b622d81","name":"DB Schema","type":"n8n-nodes-base.postgresTool","typeVersion":2.5,"position":[2200,1200],"notesInFlow":true,"credentials":{"postgres":{"id":"jlTMN8hGcDhzZ0DR","name":"Postgres account"}}},{"parameters":{"descriptionType":"manual","toolDescription":"Get table definition to find all columns and types.","operation":"executeQuery","query":"SELECT \n    c.column_name,\n    c.data_type,\n    c.is_nullable,\n    c.column_default,\n    tc.constraint_type,\n    ccu.table_name AS referenced_table,\n    ccu.column_name AS referenced_column\nFROM \n    information_schema.columns c\nLEFT JOIN \n    information_schema.key_column_usage kcu \n    ON c.table_name = kcu.table_name \n    AND c.column_name = kcu.column_name\nLEFT JOIN \n    information_schema.table_constraints tc \n    ON kcu.constraint_name = tc.constraint_name\n    AND tc.constraint_type = 'FOREIGN KEY'\nLEFT JOIN\n    information_schema.constraint_column_usage ccu\n    ON tc.constraint_name = ccu.constraint_name\nWHERE \n    c.table_name = '{{ $fromAI(\"table_name\") }}' -- Your table name\n    AND c.table_schema = 'public' -- Ensure it's in the right schema\nORDER BY \n    c.ordinal_position;\n","options":{}},"id":"afa10967-a2a8-4751-9736-995b9e4f5302","name":"Get table definition","type":"n8n-nodes-base.postgresTool","typeVersion":2.5,"position":[2360,1160],"credentials":{"postgres":{"id":"jlTMN8hGcDhzZ0DR","name":"Postgres account"}}},{"parameters":{"content":"**Finetune the prompt of assistant**","height":80,"width":215},"id":"712f73d3-f1cf-49e1-80d8-3d1f0587fd9c","name":"Sticky Note","type":"n8n-nodes-base.stickyNote","position":[1980,780],"typeVersion":1},{"parameters":{"agent":"openAiFunctionsAgent","promptType":"define","text":"={{ $('When chat message received').item.json.chatInput }}","options":{"systemMessage":"You are DB assistant. You need to run queries in DB aligned with user requests.\n\nRun custom SQL query to aggregate data and response to user.\n\nFetch all data to analyse it for response if needed.\n"}},"id":"cb3e62be-6961-4c97-8b6b-80c8f1b90031","name":"AI Agent","type":"@n8n/n8n-nodes-langchain.agent","typeVersion":1.6,"position":[1960,900]},{"parameters":{"descriptionType":"manual","toolDescription":"Run custom SQL queries using knowledge about Output structure to provide needed response for user request.\nUse ->> operator to extract JSON data.","operation":"executeQuery","query":"{{ $fromAI(\"query\",\"SQL query for PostgreSQL DB in Supabase\") }}","options":{}},"id":"19cadab1-62fd-483c-bc42-b5d183e36fa0","name":"Run SQL Query2","type":"n8n-nodes-base.postgresTool","typeVersion":2.5,"position":[1920,2000],"credentials":{"postgres":{"id":"jlTMN8hGcDhzZ0DR","name":"Postgres account"}}},{"parameters":{"options":{}},"id":"5bfafa01-96a7-47dc-bbe1-45b41424d0eb","name":"OpenAI Chat Model1","type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","typeVersion":1,"position":[1640,2020],"credentials":{"openAiApi":{"id":"Xhw7jhGubqs4BVIn","name":"OpenAi ai_agent"}}},{"parameters":{"descriptionType":"manual","toolDescription":"Get list of all tables in database","operation":"executeQuery","query":"SELECT table_schema, table_name\nFROM information_schema.tables\nWHERE table_type = 'BASE TABLE' AND table_schema = 'public';","options":{}},"id":"934e9751-304f-4d19-a941-7d34f3d22192","name":"DB Schema1","type":"n8n-nodes-base.postgresTool","typeVersion":2.5,"position":[2060,2000],"credentials":{"postgres":{"id":"jlTMN8hGcDhzZ0DR","name":"Postgres account"}}},{"parameters":{"descriptionType":"manual","toolDescription":"Get table definition to find all columns and types.","operation":"executeQuery","query":"SELECT \n    c.column_name,\n    c.data_type,\n    c.is_nullable,\n    c.column_default,\n    tc.constraint_type,\n    ccu.table_name AS referenced_table,\n    ccu.column_name AS referenced_column\nFROM \n    information_schema.columns c\nLEFT JOIN \n    information_schema.key_column_usage kcu \n    ON c.table_name = kcu.table_name \n    AND c.column_name = kcu.column_name\nLEFT JOIN \n    information_schema.table_constraints tc \n    ON kcu.constraint_name = tc.constraint_name\n    AND tc.constraint_type = 'FOREIGN KEY'\nLEFT JOIN\n    information_schema.constraint_column_usage ccu\n    ON tc.constraint_name = ccu.constraint_name\nWHERE \n    c.table_name = '{{ $fromAI(\"table_name\") }}' -- Your table name\n    AND c.table_schema = 'public' -- Ensure it's in the right schema\nORDER BY \n    c.ordinal_position;\n","options":{}},"id":"ea969ded-b10b-49be-ab80-6571f39fddad","name":"Get table definition1","type":"n8n-nodes-base.postgresTool","typeVersion":2.5,"position":[2220,2000],"credentials":{"postgres":{"id":"jlTMN8hGcDhzZ0DR","name":"Postgres account"}}},{"parameters":{"content":"**Finetune the prompt of assistant**","height":80,"width":215},"id":"fd581a1f-a38a-4df9-8bb0-6dba66fd2a34","name":"Sticky Note1","type":"n8n-nodes-base.stickyNote","position":[1840,1620],"typeVersion":1},{"parameters":{"content":"**Replace password and username for Supabase**","height":80,"width":215,"color":3},"id":"ecd6047b-8e9d-4b0f-9728-193854f23391","name":"Sticky Note11","type":"n8n-nodes-base.stickyNote","position":[2080,2260],"typeVersion":1},{"parameters":{"name":"search_table","description":"Run custom SQL queries using knowledge about Output structure to provide needed response for user request.\nUse ->> operator to extract JSON data.","jsCode":"const { Pool } = require('pg');\n\n// Create a connection pool to the PostgreSQL database\nconst pool = new Pool({\n  user: 'postgres.mmxvlkzpotcrbgxvawvx', // Replace with your actual Supabase username\n  host: 'aws-0-us-west-1.pooler.supabase.com', // Replace with your actual Supabase host\n  database: 'postgres', // Replace with your actual Supabase database name\n  password: 'er*^XSck*4G6G7if#a2s', // Replace with your actual Supabase password\n  port: 6543, // Replace with your PostgreSQL port, typically 5432\n});\n\nasync function runQuery(query) {\n  try {\n    // Execute the dynamic query\n    const result = await pool.query(query);\n\n    // Extract the rows from the result\n    const queryResult = result.rows;\n\n    // Return the result as a stringified JSON\n    return JSON.stringify(queryResult);\n\n  } catch (error) {\n    // Handle any errors during the query execution and return error message as a string\n    return JSON.stringify({ error: error.message });\n  }\n}\n\n// Example call to the function with dynamic query\nconst dynamicQuery = query.sql_query;\n\n// Call the function with the dynamic query\nreturn runQuery(dynamicQuery);","specifyInputSchema":true,"jsonSchemaExample":"{\n\t\"sql_query\": \"SELECT * FROM FILES\"\n}"},"id":"c0f7d84e-a9ff-43a3-b16b-8b3f4a38f4e1","name":"Run SQL query2","type":"@n8n/n8n-nodes-langchain.toolCode","typeVersion":1.1,"position":[1780,2280]},{"parameters":{"options":{}},"id":"bc0e79da-b5aa-4a33-8a44-7e0045ebe523","name":"When chat message received","type":"@n8n/n8n-nodes-langchain.chatTrigger","typeVersion":1.1,"position":[1180,1780],"webhookId":"6e95bc27-99a6-417c-8bf7-2831d7f7a4be"},{"parameters":{"agent":"openAiFunctionsAgent","promptType":"define","text":"={{ $('When chat message received').item.json.chatInput }}","options":{"systemMessage":"You are DB assistant. You need to run queries in DB aligned with user requests.\n\nRun custom SQL query to aggregate data and response to user.\n\nFetch all data to analyse it for response if needed.\n"}},"id":"ebd14b2a-a43a-4771-ac7a-d8e0e18d4363","name":"AI Agent1","type":"@n8n/n8n-nodes-langchain.agent","typeVersion":1.6,"position":[1820,1740]}],"connections":{"Run SQL query":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"OpenAI Chat Model":{"ai_languageModel":[[{"node":"AI Agent","type":"ai_languageModel","index":0}]]},"DB Schema":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"Get table definition":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"Run SQL Query2":{"ai_tool":[[{"node":"AI Agent1","type":"ai_tool","index":0}]]},"OpenAI Chat Model1":{"ai_languageModel":[[{"node":"AI Agent1","type":"ai_languageModel","index":0}]]},"DB Schema1":{"ai_tool":[[{"node":"AI Agent1","type":"ai_tool","index":0}]]},"Get table definition1":{"ai_tool":[[{"node":"AI Agent1","type":"ai_tool","index":0}]]},"When chat message received":{"main":[[{"node":"AI Agent1","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"3d3248a5-1f33-4b0a-9038-8a7643a358a5","triggerCount":0,"tags":[]}