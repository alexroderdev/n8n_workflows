{"createdAt":"2024-12-21T23:01:22.025Z","updatedAt":"2024-12-22T05:01:25.083Z","id":"NLEdQQXIKlQ72u3W","name":"Subworkflow for save at Github","active":false,"nodes":[{"parameters":{"content":"## Subworkflow","height":731.7039821513649,"width":1910.7813046051347,"color":4},"id":"c204ef10-c730-4d29-a5ef-519cfe00100b","name":"Sticky Note","type":"n8n-nodes-base.stickyNote","position":[-60,-100],"typeVersion":1},{"parameters":{},"id":"8e4b4496-4be2-42c2-8dd0-e687866b026c","name":"Execute Workflow Trigger","type":"n8n-nodes-base.executeWorkflowTrigger","position":[0,280],"typeVersion":1},{"parameters":{"assignments":{"assignments":[{"id":"8d513345-6484-431f-afb7-7cf045c90f4f","name":"Done","type":"boolean","value":true}]},"options":{}},"id":"fb6f35cd-6d08-4658-bf7a-3d243e93dbbb","name":"Return","type":"n8n-nodes-base.set","position":[1660,100],"typeVersion":3.3},{"parameters":{"url":"={{ $json.download_url }}","options":{}},"id":"45cef421-dbc6-4c86-8125-a747fee26db7","name":"Get File","type":"n8n-nodes-base.httpRequest","position":[620,-20],"typeVersion":4.2},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":1},"conditions":[{"id":"45ce825e-9fa6-430c-8931-9aaf22c42585","operator":{"type":"string","operation":"empty","singleValue":true},"leftValue":"={{ $json.content }}","rightValue":""},{"id":"9619a55f-7fb1-4f24-b1a7-7aeb82365806","operator":{"type":"string","operation":"notExists","singleValue":true},"leftValue":"={{ $json.error }}","rightValue":""}],"combinator":"and"},"options":{}},"id":"719adf00-0888-4d85-a9dd-b345cad3a782","name":"If file too large","type":"n8n-nodes-base.if","position":[380,0],"typeVersion":2},{"parameters":{},"id":"2bb5d183-6f84-4762-a6dc-fe27ba95a159","name":"Merge Items","type":"n8n-nodes-base.merge","position":[380,260],"typeVersion":2},{"parameters":{"jsCode":"// Función para validar si un string es JSON válido\nconst isValidJSON = (str) => {\n  try {\n    JSON.parse(str);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\n// Función para ordenar las claves de objetos JSON\nconst orderJsonKeys = (input) => {\n  if (Array.isArray(input)) {\n    return input.map(item => {\n      if (typeof item === 'object' && item !== null) {\n        return orderJsonKeys(item);\n      }\n      return item;\n    });\n  }\n  \n  if (typeof input !== 'object' || input === null) {\n    return input;\n  }\n  \n  const ordered = {};\n  Object.keys(input).sort().forEach(key => {\n    ordered[key] = orderJsonKeys(input[key]);\n  });\n  return ordered;\n};\n\ntry {\n  // Validar entrada\n  if (!$input.all() || !Array.isArray($input.all())) {\n    throw new Error('Invalid input: $input.all() is not an array');\n  }\n\n  console.log('Input received:', JSON.stringify($input.all()));\n\n  // Si no hay elementos en el input\n  if ($input.all().length === 0) {\n    return [{\n      json: {\n        github_status: \"empty\",\n        message: \"No input data received\",\n        n8n_data_stringy: \"\",\n        content_decoded: {},\n        subPath: \"2024/12/\"\n      }\n    }];\n  }\n\n  // Validar que tenemos los datos necesarios\n  if (!$input.all()[0] || !$input.all()[0].json) {\n    throw new Error('First input item does not contain json property');\n  }\n\n  const firstInput = $input.all()[0].json;\n\n  // Si el contenido es solo un salto de línea o está vacío\n  if (firstInput.content === \"Cg==\\n\" || firstInput.content === \"Cg==\" || !firstInput.content.trim()) {\n    return [{\n      json: {\n        ...firstInput,\n        github_status: \"empty\",\n        message: \"File is empty or contains only newline\",\n        n8n_data_stringy: \"\",\n        content_decoded: {},\n        subPath: firstInput.subPath || \"2024/12/\"\n      }\n    }];\n  }\n\n  let result;\n\n  // Caso 1: Contenido en base64\n  if (Object.keys(firstInput).includes(\"content\")) {\n    console.log('Processing content branch');\n    \n    const base64Content = firstInput.content;\n    const decodedContent = Buffer.from(base64Content, 'base64').toString().trim();\n\n    let origWorkflow = {};\n    try {\n      origWorkflow = decodedContent ? JSON.parse(decodedContent) : {};\n    } catch (e) {\n      return [{\n        json: {\n          ...firstInput,\n          github_status: \"invalid\",\n          message: \"Content is not valid JSON\",\n          n8n_data_stringy: \"\",\n          content_decoded: {},\n          subPath: firstInput.subPath || \"2024/12/\"\n        }\n      }];\n    }\n\n    const n8nWorkflow = $input.all()[1]?.json || {};\n    const orderedOriginal = orderJsonKeys(origWorkflow);\n    const orderedActual = orderJsonKeys(n8nWorkflow);\n\n    result = {\n      ...firstInput,\n      github_status: JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual) ? \"same\" : \"different\",\n      content_decoded: orderedOriginal,\n      n8n_data_stringy: JSON.stringify(orderedActual, null, 2),\n      subPath: firstInput.subPath || \"2024/12/\"\n    };\n  }\n  // Resto de casos...\n\n  return [{\n    json: result || {\n      ...firstInput,\n      github_status: \"unknown\",\n      message: \"Unhandled case\",\n      n8n_data_stringy: \"\",\n      content_decoded: {},\n      subPath: firstInput.subPath || \"2024/12/\"\n    }\n  }];\n\n} catch (error) {\n  console.error('Error processing:', error);\n  return [{\n    json: {\n      ...($input.all()[0]?.json || {}),\n      github_status: \"error\",\n      error_message: error.message,\n      error_details: error.stack,\n      n8n_data_stringy: \"\",\n      content_decoded: {},\n      subPath: $input.all()[0]?.json?.subPath || \"2024/12/\"\n    }\n  }];\n}"},"id":"a241079d-ec85-4432-bf1a-b20037f96a08","name":"isDiffOrNew","type":"n8n-nodes-base.code","position":[580,260],"typeVersion":1},{"parameters":{"dataType":"string","value1":"={{$json.github_status}}","rules":{"rules":[{"value2":"same"},{"value2":"different","output":1},{"value2":"new","output":2}]}},"id":"c08f1ea4-27e6-4388-88c0-88c750799a03","name":"Check Status","type":"n8n-nodes-base.switch","position":[980,260],"typeVersion":1},{"parameters":{},"id":"dd6ccd19-605d-4e7d-adff-57308bd5def2","name":"Same file - Do nothing","type":"n8n-nodes-base.noOp","position":[1220,100],"typeVersion":1},{"parameters":{},"id":"8a742142-4c96-4ddd-bc5c-e6e55734c4ff","name":"File is different","type":"n8n-nodes-base.noOp","position":[1200,260],"typeVersion":1},{"parameters":{},"id":"a5a9c341-4203-4d95-8de1-e2275cba26d9","name":"File is new","type":"n8n-nodes-base.noOp","position":[1200,460],"typeVersion":1},{"parameters":{"resource":"file","owner":{"__rl":true,"value":"https://github.com/alexroderdev/n8n_workflows.git","mode":"url"},"repository":{"__rl":true,"value":"n8n_workflows","mode":"name"},"filePath":"={{ $('Config').first().item.repo_path }}{{ $json.subPath }}{{$('Execute Workflow Trigger').first().json.id}}.json","fileContent":"={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}","commitMessage":"={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"},"id":"60286fd8-c8f3-4927-bb30-a1dc39cde715","name":"Create new file","type":"n8n-nodes-base.github","position":[1420,460],"typeVersion":1,"credentials":{"githubApi":{"id":"v3iseuonNOSBuVoE","name":"GitHub account"}}},{"parameters":{"resource":"file","operation":"edit","owner":{"__rl":true,"value":"https://github.com/alexroderdev/n8n_workflows.git","mode":"url"},"repository":{"__rl":true,"value":"n8n_workflows","mode":"name"},"filePath":"={{ $('Config').first().item.repo_path }}{{ $json.subPath }}{{$('Execute Workflow Trigger').first().json.id}}.json","fileContent":"={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}","commitMessage":"={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"},"id":"bcf75d44-30d6-46ff-a89c-237bc903e786","name":"Edit existing file","type":"n8n-nodes-base.github","position":[1420,260],"typeVersion":1,"credentials":{"githubApi":{"id":"v3iseuonNOSBuVoE","name":"GitHub account"}}},{"parameters":{"assignments":{"assignments":[{"id":"dae43d3b-56e5-4098-b602-862ebf5cd073","name":"subPath","type":"string","value":"={{ $('Execute Workflow Trigger').first().json.createdAt.split('-')[0] }}/{{ $('Execute Workflow Trigger').first().json.createdAt.split('-')[1] }}/"}]},"includeOtherFields":true,"options":{}},"id":"672fd4c6-7f95-44f8-8a76-ed2a5e18ce92","name":"Create sub path","type":"n8n-nodes-base.set","position":[780,260],"typeVersion":3.3},{"parameters":{"resource":"file","operation":"get","owner":{"__rl":true,"value":"https://github.com/alexroderdev/n8n_workflows.git","mode":"url"},"repository":{"__rl":true,"value":"={{ $json.repo_name }}","mode":"name"},"filePath":"docs/","asBinaryProperty":false,"additionalParameters":{}},"id":"0078eb88-8c36-4cfd-8121-440023c05945","name":"Get file data","type":"n8n-nodes-base.github","position":[180,0],"typeVersion":1,"alwaysOutputData":true,"credentials":{"githubApi":{"id":"v3iseuonNOSBuVoE","name":"GitHub account"}},"continueOnFail":true},{"parameters":{"assignments":{"assignments":[{"id":"8f6d1741-772f-462a-811f-4c334185e4f0","name":"repo_owner","type":"string","value":"=AlexRoderDev"},{"id":"8cac215c-4fd7-422f-9fd2-6b2d1e5e0383","name":"repo_name","type":"string","value":"=n8n_workflows"},{"id":"eee305e9-4164-462a-86bd-80f0d58a31ae","name":"repo_path","type":"string","value":"=n8n_workflows/"}]},"includeOtherFields":true,"options":{}},"id":"27802352-35fc-4945-8e9c-e83b74a96025","name":"Config","type":"n8n-nodes-base.set","position":[180,280],"typeVersion":3.4}],"connections":{"Execute Workflow Trigger":{"main":[[{"node":"Config","type":"main","index":0}]]},"Get File":{"main":[[{"node":"Merge Items","type":"main","index":0}]]},"If file too large":{"main":[[{"node":"Get File","type":"main","index":0}],[{"node":"Merge Items","type":"main","index":0}]]},"Merge Items":{"main":[[{"node":"isDiffOrNew","type":"main","index":0}]]},"isDiffOrNew":{"main":[[{"node":"Create sub path","type":"main","index":0}]]},"Check Status":{"main":[[{"node":"Same file - Do nothing","type":"main","index":0}],[{"node":"File is different","type":"main","index":0}],[{"node":"File is new","type":"main","index":0}]]},"Same file - Do nothing":{"main":[[{"node":"Return","type":"main","index":0}]]},"File is different":{"main":[[{"node":"Edit existing file","type":"main","index":0}]]},"File is new":{"main":[[{"node":"Create new file","type":"main","index":0}]]},"Create new file":{"main":[[{"node":"Return","type":"main","index":0}]]},"Edit existing file":{"main":[[{"node":"Return","type":"main","index":0}]]},"Create sub path":{"main":[[{"node":"Check Status","type":"main","index":0}]]},"Get file data":{"main":[[{"node":"If file too large","type":"main","index":0}]]},"Config":{"main":[[{"node":"Get file data","type":"main","index":0},{"node":"Merge Items","type":"main","index":1}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{},"versionId":"f8db847a-2359-412d-835c-8cf3406a1cdc","triggerCount":0,"tags":[]}